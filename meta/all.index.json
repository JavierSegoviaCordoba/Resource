{
  "ownKey": "index",
  "childrenPages": {"kotlindoc": {
    "ownKey": "kotlindoc",
    "childrenPages": {"resource": {
      "ownKey": "resource",
      "childrenPages": {"com": {
        "ownKey": "com",
        "childrenPages": {"javiersc": {
          "ownKey": "javiersc",
          "childrenPages": {"resource": {
            "ownKey": "resource",
            "childrenPages": {
              "extensions": {
                "ownKey": "extensions",
                "childrenPages": {"resource": {
                  "ownKey": "resource",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc/resource",
                      "baseUrl": "http://resource.javiersc.com",
                      "fileName": "com/javiersc/resource/extensions/resource",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/extensions/resource"
                    },
                    "description": "",
                    "title": "com.javiersc.resource.extensions.resource",
                    "content": "<p>combine<\/p>\n<p>Combine two Resource into one.\nSuccess happens when both are success\nLoading happens when one is Loading and the another is Loading or Success\nIf there is only an error,  defaultError  will be used\nIf both resources are error,  error  will be used or  defaultError  if it is null<\/p>\ncombine\n<p>Combine two Resource into one. Both resources has the same error type.\nSuccess happens when both are success\nLoading happens when one is Loading and the another is Loading or Success\nIf only one resource is error, it will be returned as error\nIf both resources are errors,  this  will be returned as error<\/p>\nasFlow\n<p>Extension function to transform a Resource into a Flow.<\/p>\nfolder\n<p>Extension function to fold a Resource.\nCheck Resource.Folder inner class to see all the available options.<\/p>\nfold\n<p>Extension function to fold a Resource without builder.<\/p>\nifLoading\n<p>Extension function with a callback which is invoked if Resource is Loading.<\/p>\nifNoLoading\n<p>Extension function with a callback which is invoked if Resource is not Loading.<\/p>\nifSuccess\n<p>Extension function with a callback which is invoked if Resource is Success and has data.<\/p>\nifNoSuccess\n<p>Extension function with a callback which is invoked if Resource is not Success.<\/p>\nifError\n<p>Extension function with a callback which is invoked if Resource is Error and has error data.<\/p>\nifNoError\n<p>Extension function with a callback which is invoked if Resource is not Error.<\/p>\nmap\n<p>Map any Resource to another Resource.<\/p>\nmap\n<p>Map any Resource to another object, for example a ScreenState sealed class.<\/p>\nmapSuccess\n<p>Map any Resource to another Resource.<\/p>\nmapError\n<p>Map any Resource to another Resource.<\/p>\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/resource",
                    "baseUrl": "http://resource.javiersc.com",
                    "fileName": "com/javiersc/resource/extensions",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/extensions"
                  },
                  "description": "",
                  "title": "com.javiersc.resource.extensions",
                  "content": "<p>com.javiersc.resource.extensions.resource<\/p>\n<p>asSuccess<\/p>\n<p>Transform any thing to Success.<\/p>\nasSuccess\n<p>Transform any flow to a Success flow.<\/p>\nasError\n<p>Transform any thing to Error.<\/p>\nasError\n<p>Transform any flow to an Error flow.<\/p>\nasSuccessFlow\n<p>Transform any thing to Success Flow.<\/p>\nasErrorFlow\n<p>Transform any thing to Error.<\/p>\nmap\n<p>Map a flow of resources to another object, for example a ScreenState sealed class<\/p>\ncombine\n<p>Combine two Resource flows with the same error type into one<\/p>\ncombineTransform\n<p>Combine and transform two Resource flows with the same error type into one<\/p>\n"
                }]
              },
              "resource": {
                "ownKey": "resource",
                "childrenPages": {
                  "folder": {
                    "ownKey": "folder",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/resource",
                        "baseUrl": "http://resource.javiersc.com",
                        "fileName": "com/javiersc/resource/resource/folder",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/resource/folder"
                      },
                      "description": "",
                      "title": "Folder",
                      "content": "<p>A builder which lets fold a Resource with a series of functions that will be invoked based on\nthe Resource state.<\/p><init>\n<p>A builder which lets fold a Resource with a series of functions that will be invoked based on\nthe Resource state.<\/p>\nloading\n\nnoLoading\n\nsuccess\n\nnoSuccess\n\nerror\n\nnoError\n\n"
                    }]
                  },
                  "success": {
                    "ownKey": "success",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/resource",
                        "baseUrl": "http://resource.javiersc.com",
                        "fileName": "com/javiersc/resource/resource/success",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/resource/success"
                      },
                      "description": "",
                      "title": "Success",
                      "content": "<p>Success state which has a param  data  of type  S .<\/p>data\n<p>can be any object to be wrapped.<\/p>\n<init>\n<p>Success state which has a param  data  of type  S .<\/p>\n"
                    }]
                  },
                  "loading": {
                    "ownKey": "loading",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/resource",
                        "baseUrl": "http://resource.javiersc.com",
                        "fileName": "com/javiersc/resource/resource/loading",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/resource/loading"
                      },
                      "description": "",
                      "title": "Loading",
                      "content": "<p>Loading state which has no params<\/p>\n"
                    }]
                  },
                  "error": {
                    "ownKey": "error",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/resource",
                        "baseUrl": "http://resource.javiersc.com",
                        "fileName": "com/javiersc/resource/resource/error",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/resource/error"
                      },
                      "description": "",
                      "title": "Error",
                      "content": "<p>Error state which has a param  error  of type  E <\/p>error\n<p>can be any object to be wrapped.<\/p>\n<init>\n<p>Error state which has a param  error  of type  E <\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/resource",
                    "baseUrl": "http://resource.javiersc.com",
                    "fileName": "com/javiersc/resource/resource",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource/resource"
                  },
                  "description": "",
                  "title": "Resource",
                  "content": "<p>This class lets wrap any thing and add an associated state:\nLoading, Success and Error.<\/p>isLoading\n<p>isSuccess<\/p>\n<p>isError<\/p>\n<p>combine<\/p>\n<p>Combine two Resource into one.\nSuccess happens when both are success\nLoading happens when one is Loading and the another is Loading or Success\nIf there is only an error,  defaultError  will be used\nIf both resources are error,  error  will be used or  defaultError  if it is null<\/p>\ncombine\n<p>Combine two Resource into one. Both resources has the same error type.\nSuccess happens when both are success\nLoading happens when one is Loading and the another is Loading or Success\nIf only one resource is error, it will be returned as error\nIf both resources are errors,  this  will be returned as error<\/p>\nasFlow\n<p>Extension function to transform a Resource into a Flow.<\/p>\nfolder\n<p>Extension function to fold a Resource.\nCheck Resource.Folder inner class to see all the available options.<\/p>\nfold\n<p>Extension function to fold a Resource without builder.<\/p>\nifLoading\n<p>Extension function with a callback which is invoked if Resource is Loading.<\/p>\nifNoLoading\n<p>Extension function with a callback which is invoked if Resource is not Loading.<\/p>\nifSuccess\n<p>Extension function with a callback which is invoked if Resource is Success and has data.<\/p>\nifNoSuccess\n<p>Extension function with a callback which is invoked if Resource is not Success.<\/p>\nifError\n<p>Extension function with a callback which is invoked if Resource is Error and has error data.<\/p>\nifNoError\n<p>Extension function with a callback which is invoked if Resource is not Error.<\/p>\nmap\n<p>Map any Resource to another Resource.<\/p>\nmap\n<p>Map any Resource to another object, for example a ScreenState sealed class.<\/p>\nmapSuccess\n<p>Map any Resource to another Resource.<\/p>\nmapError\n<p>Map any Resource to another Resource.<\/p>\n"
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "kotlindoc/resource",
                "baseUrl": "http://resource.javiersc.com",
                "fileName": "com/javiersc/resource",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resource"
              },
              "description": "",
              "title": "com.javiersc.resource",
              "content": "<p>Resource<\/p>\n<p>This class lets wrap any thing and add an associated state:\nLoading, Success and Error.<\/p>\ncom.javiersc.resource.extensions\n"
            }]
          }}
        }}
      }},
      "ownPages": [{
        "reference": {
          "path": "kotlindoc",
          "baseUrl": "http://resource.javiersc.com",
          "fileName": "resource",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "http://resource.javiersc.com/kotlindoc/resource"
        },
        "description": "",
        "title": "Resource",
        "content": "<table>\n<thead>\n<tr><th align=\"left\"><a href=\"https://repo1.maven.org/maven2/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/maven-central/v/com.javiersc.resource/resource?label=Master\" alt=\"Master Download\" /><\/a><\/th><th align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/master\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/master?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Master\" /><\/a><\/th><th align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3AMaster/master\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Master/master?label=Build&amp;logo=GitHub\" alt=\"Master Build\" /><\/a><\/th><th align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391050\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/master?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Master\" /><\/a><\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td align=\"left\"><a href=\"https://oss.sonatype.org/content/repositories/snapshots/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/nexus/s/com.javiersc.resource/resource?server=https%3A%2F%2Foss.sonatype.org%2F&amp;label=Develop&amp;color=orange\" alt=\"Develop Download\" /><\/a><\/td><td align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/develop\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/develop?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Develop\" /><\/a><\/td><td align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3ADevelop/develop\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Develop/develop?label=Build&amp;logo=GitHub\" alt=\"Develop Build\" /><\/a><\/td><td align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391049\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/develop?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Develop\" /><\/a><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h1 id=\"resource\"><a href=\"#resource\" id=\"resource\" class=\"anchor\"><\/a>Resource<\/h1>\n<p><code>Resource<\/code> is a <code>sealed class<\/code> that allows you to wrap any object based on a state. It has these options:<\/p>\n<ul>\n<li>🔄 Loading: To use at that moment that a loading indicator should appear.<\/li>\n<li>👍 Success: When the happy path occurs.<\/li>\n<li>❌ Error: If there is a problem you will get this.<\/li>\n<\/ul>\n<p>This library works very well when used in conjunction with\n<a href=\"https://github.com/JavierSegoviaCordoba/NetworkResponse\"><code>NetworkResponse<\/code><\/a> which is very similar\nto <code>Resource<\/code> but is intended for use with <code>Retrofit<\/code>.<\/p>\n<p>For more information see <a href=\"http://resource.javiersc.com/\">the website<\/a><\/p>\n<h2 id=\"download\"><a href=\"#download\" id=\"download\" class=\"anchor\"><\/a>Download<\/h2>\n<p>This library is Kotlin Multiplatform but at this moment <code>jvm<\/code> is the only artifact generated. It is\navailable at Maven Central.<\/p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.javiersc.resource:resource:$version&quot;)\n<\/code><\/pre>\n<h2 id=\"fold-your-resource\"><a href=\"#fold-your-resource\" id=\"fold-your-resource\" class=\"anchor\"><\/a>Fold your Resource<\/h2>\n<p>Fold a <code>Resource<\/code> invokes multiple callbacks to manage its state for any event. A normal flow can be:<\/p>\n<ol>\n<li>Emit <code>Loading<\/code> to show the progress indicator.<\/li>\n<li>Emit <code>Success<\/code> to populate your data or emit <code>Error<\/code> if something were wrong to show an error.<\/li>\n<\/ol>\n<pre><code class=\"language-kotlin\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.folder {\n    loading { println(&quot;Loading: Yes&quot;) }\n    noLoading { println(&quot;Loading: no&quot;) }  // Invoked\n\n    success { dog: Dog -&gt; println(&quot;Success: $dog&quot;) } // Invoked\n    noSuccess { println(&quot;Success: no&quot;) }\n\n    error { error: Error -&gt; println(&quot;Error: $error&quot;) }\n    noError { println(&quot;Error: no&quot;) }  // Invoked\n}\n<\/code><\/pre>\n<p>Exists a <code>fold<\/code> function similar to folder buth without the builder pattern<\/p>\n<pre><code class=\"language-kotlin\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.fold(\n    loading = { println(&quot;Loading: Yes&quot;) },\n    noLoading = { println(&quot;Loading: no&quot;) },  // Invoked\n    success = { dog: Dog -&gt; println(&quot;Success: $dog&quot;) }, // Invoked\n    noSuccess = { println(&quot;Success: no&quot;) },\n    error = { error: Error -&gt; println(&quot;Error: $error&quot;) },\n    noError = { println(&quot;Error: no&quot;) },  // Invoked\n)\n<\/code><\/pre>\n<p>You don't have to add all those functions, for example, you usually only have to use:<\/p>\n<ul>\n<li><code>loading<\/code> to show a progress indicator.<\/li>\n<li><code>noLoading<\/code> to hide the progress indicator.<\/li>\n<li><code>success<\/code> to load the data.<\/li>\n<li><code>error<\/code> to show and error.<\/li>\n<\/ul>\n<h2 id=\"mappers-and-common-extension-functions\"><a href=\"#mappers-and-common-extension-functions\" id=\"mappers-and-common-extension-functions\" class=\"anchor\"><\/a>Mappers and common extension functions<\/h2>\n<p>Map a <code>Resource<\/code> to another <code>Resource<\/code> is possible with the following\n<a href=\"/resource/src/commonMain/kotlin/Resource.kt\">extension function<\/a>:<\/p>\n<ul>\n<li><code>Resource<\/code> to <code>Resource<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val anotherResource: Resource&lt;AnotherUser, AnotherError&gt; = resource.map(\n    success = { user: User -&gt; user.toAnotherUser() },\n    error = { error: Error -&gt; error.toAnotherError() }\n)\n// toAnotherUser() and toAnotherError() mappers should be created by yourself, if they are\n// extension functions and the resource uses inference for the type:\nval anotherResource = resource.map(User::toAnotherUser, Error::toAnotherError)\n<\/code><\/pre>\n<ul>\n<li>Some value to <code>Resource<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val name: String = &quot;Auri&quot;\nval nameResource = name.toResourceSuccess()\n\nval message: String = &quot;Some error message&quot;\nval messageResource = message.toResourceError()\n<\/code><\/pre>\n<ul>\n<li>A lot of checkers for each state, for example:<\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val resource: Resource&lt;String&gt; = Resource.Success(&quot;Auri&quot;)\nresource.ifSuccess { data: String -&gt;\n    println(data) // &quot;Auri&quot;\n}\n<\/code><\/pre>\n<p>You can see all the common extension functions\n<a href=\"/resource/src/commonMain/kotlin/extensions/Flow.kt\">here<\/a>\nand <a href=\"/resource/src/commonMain/kotlin/extensions/Any.kt\">here<\/a><\/p>\n<h2 id=\"flow\"><a href=\"#flow\" id=\"flow\" class=\"anchor\"><\/a>Flow<\/h2>\n<p>There are four <code>Flow<\/code> extension functions:<\/p>\n<ul>\n<li><code>Flow&lt;R&gt;.map(...)<\/code> included in Kotlin, let you to easily map the object inside your <code>Flow<\/code> to\nany <code>Resource<\/code>:<\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersFlow: Flow&lt;List&lt;User&gt;&gt;\n\nval usersResourceFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; =\n    usersFlow.map { users: List&lt;User&gt; -&gt; Resource.Success(users) }\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceSuccess()<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersSuccessFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceSuccess()\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceError()<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersErrorFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceError()\n<\/code><\/pre>\n"
      }]
    }}
  }},
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "http://resource.javiersc.com",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "http://resource.javiersc.com"
      },
      "description": "",
      "title": "Home",
      "content": "<table>\n<thead>\n<tr><th align=\"left\"><a href=\"https://repo1.maven.org/maven2/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/maven-central/v/com.javiersc.resource/resource?label=Master\" alt=\"Master Download\" /><\/a><\/th><th align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/master\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/master?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Master\" /><\/a><\/th><th align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3AMaster/master\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Master/master?label=Build&amp;logo=GitHub\" alt=\"Master Build\" /><\/a><\/th><th align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391050\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/master?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Master\" /><\/a><\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td align=\"left\"><a href=\"https://oss.sonatype.org/content/repositories/snapshots/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/nexus/s/com.javiersc.resource/resource?server=https%3A%2F%2Foss.sonatype.org%2F&amp;label=Develop&amp;color=orange\" alt=\"Develop Download\" /><\/a><\/td><td align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/develop\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/develop?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Develop\" /><\/a><\/td><td align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3ADevelop/develop\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Develop/develop?label=Build&amp;logo=GitHub\" alt=\"Develop Build\" /><\/a><\/td><td align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391049\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/develop?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Develop\" /><\/a><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h1 id=\"resource\"><a href=\"#resource\" id=\"resource\" class=\"anchor\"><\/a>Resource<\/h1>\n<p><code>Resource<\/code> is a <code>sealed class<\/code> that allows you to wrap any object based on a state. It has these options:<\/p>\n<ul>\n<li>🔄 Loading: To use at that moment that a loading indicator should appear.<\/li>\n<li>👍 Success: When the happy path occurs.<\/li>\n<li>❌ Error: If there is a problem you will get this.<\/li>\n<\/ul>\n<p>This library works very well when used in conjunction with\n<a href=\"https://github.com/JavierSegoviaCordoba/NetworkResponse\"><code>NetworkResponse<\/code><\/a> which is very similar\nto <code>Resource<\/code> but is intended for use with <code>Retrofit<\/code>.<\/p>\n<h2 id=\"download\"><a href=\"#download\" id=\"download\" class=\"anchor\"><\/a>Download<\/h2>\n<p>This library is Kotlin Multiplatform but at this moment <code>jvm<\/code> is the only artifact generated. It is\navailable at Maven Central.<\/p>\n<pre theme=\"darcula\" lines=\"false\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"false\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">implementation(&quot;com.javiersc.resource:resource:$version&quot;)\n<\/code><\/pre>\n<h2 id=\"fold-your-resource\"><a href=\"#fold-your-resource\" id=\"fold-your-resource\" class=\"anchor\"><\/a>Fold your Resource<\/h2>\n<p>Fold a <code>Resource<\/code> invokes multiple callbacks to manage its state for any event. A normal flow can be:<\/p>\n<ol>\n<li>Emit <code>Loading<\/code> to show the progress indicator.<\/li>\n<li>Emit <code>Success<\/code> to populate your data or emit <code>Error<\/code> if something were wrong to show an error.<\/li>\n<\/ol>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.folder {\n    loading { println(&quot;Loading: Yes&quot;) }\n    noLoading { println(&quot;Loading: no&quot;) }  // Invoked\n\n    success { dog: Dog -&gt; println(&quot;Success: $dog&quot;) } // Invoked\n    noSuccess { println(&quot;Success: no&quot;) }\n\n    error { error: Error -&gt; println(&quot;Error: $error&quot;) }\n    noError { println(&quot;Error: no&quot;) }  // Invoked\n}\n<\/code><\/pre>\n<p>Exists a <code>fold<\/code> function similar to folder buth without the builder pattern<\/p>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.fold(\n    loading = { println(&quot;Loading: Yes&quot;) },\n    noLoading = { println(&quot;Loading: no&quot;) },  // Invoked\n    success = { dog: Dog -&gt; println(&quot;Success: $dog&quot;) }, // Invoked\n    noSuccess = { println(&quot;Success: no&quot;) },\n    error = { error: Error -&gt; println(&quot;Error: $error&quot;) },\n    noError = { println(&quot;Error: no&quot;) },  // Invoked\n)\n<\/code><\/pre>\n<p>You don't have to add all those functions, for example, you usually only have to use:<\/p>\n<ul>\n<li><code>loading<\/code> to show a progress indicator.<\/li>\n<li><code>noLoading<\/code> to hide the progress indicator.<\/li>\n<li><code>success<\/code> to load the data.<\/li>\n<li><code>error<\/code> to show and error.<\/li>\n<\/ul>\n<h2 id=\"mappers-and-common-extension-functions\"><a href=\"#mappers-and-common-extension-functions\" id=\"mappers-and-common-extension-functions\" class=\"anchor\"><\/a>Mappers and common extension functions<\/h2>\n<p>Map a <code>Resource<\/code> to another <code>Resource<\/code> is possible with the following\n<a href=\"../../../../resource/src/commonMain/kotlin/Resource.kt\">extension function<\/a>:<\/p>\n<ul>\n<li><code>Resource<\/code> to <code>Resource<\/code><\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val anotherResource: Resource&lt;AnotherUser, AnotherError&gt; = resource.map(\n    success = { user: User -&gt; user.toAnotherUser() },\n    error = { error: Error -&gt; error.toAnotherError() }\n)\n// toAnotherUser() and toAnotherError() mappers should be created by yourself, if they are\n// extension functions and the resource uses inference for the type:\nval anotherResource = resource.map(User::toAnotherUser, Error::toAnotherError)\n<\/code><\/pre>\n<ul>\n<li>Some value to <code>Resource<\/code><\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val name: String = &quot;Auri&quot;\nval nameResource = name.toResourceSuccess()\n\nval message: String = &quot;Some error message&quot;\nval messageResource = message.toResourceError()\n<\/code><\/pre>\n<ul>\n<li>A lot of checkers for each state, for example:<\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val resource: Resource&lt;String&gt; = Resource.Success(&quot;Auri&quot;)\nresource.ifSuccess { data: String -&gt;\n    println(data) // &quot;Auri&quot;\n}\n<\/code><\/pre>\n<p>You can see all the common extension functions\n<a href=\"../../../../resource/src/commonMain/kotlin/extensions/Flow.kt\">here<\/a>\nand <a href=\"../../../../resource/src/commonMain/kotlin/extensions/Any.kt\">here<\/a><\/p>\n<h2 id=\"flow\"><a href=\"#flow\" id=\"flow\" class=\"anchor\"><\/a>Flow<\/h2>\n<p>There are four <code>Flow<\/code> extension functions:<\/p>\n<ul>\n<li><code>Flow&lt;R&gt;.map(...)<\/code> included in Kotlin, let you to easily map the object inside of your <code>Flow<\/code> to\nany <code>Resource<\/code>:<\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val usersFlow: Flow&lt;List&lt;User&gt;&gt;\n\nval usersResourceFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; =\n    usersFlow.map { users: List&lt;User&gt; -&gt; Resource.Success(users) }\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceSuccess()<\/code><\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val usersSuccessFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceSuccess()\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceError()<\/code><\/li>\n<\/ul>\n<pre theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\"><code class=\"language-run-kotlin\" theme=\"darcula\" lines=\"true\" data-autocomplete=\"true\" data-highlight-only=\"nocursor\">val usersErrorFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceError()\n<\/code><\/pre>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "http://resource.javiersc.com",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "http://resource.javiersc.com/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}